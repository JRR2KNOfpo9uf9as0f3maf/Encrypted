local bot = getBot()
local bots = #getBots()
math.randomseed(os.time() + bot.index + os.clock() * 100000)

local storageTake = {}
local storageDrop = {}
local originalWorld = {}
local itemID = {}
local saveItemID = {}
local collectMessageID = {}
local storeMessageID = {}
local messageID = {}
local initialize = {}

local messageIdInfo
local nuked = false
local wrong = false
local avatarUrl = 'https://cdn.discordapp.com/attachments/1137217694589001859/1318778973739679774/Handwritten_Love_Poster_in_White_Black_Background_20241218_101600_0000.png?ex=67639021&is=67623ea1&hm=109cfe9dac9edf4416c9ac6cd695a2725553c35ecec0d43f5561016ab3b5f9b8&'

bot.auto_reconnect = true
bot.reconnect_interval = delayReconnect
bot.random_reconnect = false
bot.auto_collect = false

local files = {
    NUKED = '[MOVE] NUKED LIST.txt',
    WRONG = '[MOVE] WRONG LIST.txt',
    VIEW = '[MOVE] BOT VIEW.txt',
    COLLECT = '[MOVE] COLLECT ID.txt',
    STORE = '[MOVE] STORE ID.txt'
}

local function writeFile(content, filePath)
    local file = io.open(filePath, 'a+')
    if file then
        file:write(content .. '\n')
        file:close()
    end
end

local function fileExists(fileName)
    local file = io.open(fileName, "r")
    if file then
        file:close()
        return true
    else
        return false
    end
end

local function deleteFile(fileName)
    local result, reason = os.remove(fileName)
    if result then
        print(fileName .. " was deleted successfully.")
    else
        print("Error deleting " .. fileName .. ": " .. reason)
    end                                                                                                             
end

local function readFile(fileName)
    local tbl = {}
    local file = io.open(fileName, 'r')
    if file then
        for line in file:lines() do
            table.insert(tbl, line)
        end
        file:close()
        return tbl
    else
        return error('Failed to open file : ' .. fileName)
    end
end

local function selectWorld(case)
    if case == 'collect' then
        if storage.take.useFile.enabled then
            local assign = readFile(storage.take.useFile.filePath)
            if assign then
                for i, world in ipairs(assign) do
                    table.insert(storageTake, world)
                end
            end
        else
            for i, world in ipairs(storage.take.world) do
                table.insert(storageTake, world)
            end
        end
    else
        if storage.drop.useFile.enabled then
            local assign = readFile(storage.drop.useFile.filePath)
            if assign then
                for i, world in ipairs(assign) do
                    table.insert(storageDrop, world)
                end
            end
        else
            for i, world in ipairs(storage.drop.world) do
                table.insert(storageDrop, world)
            end
        end
    end
end

local function spreadValue(tbl, result)
    for _, item in pairs(tbl) do
        for _, value in pairs(item.id) do
            table.insert(result, {id = value, limit = item.limit, amount = item.amount})
        end
    end
    return result
end

local function round(num)
    return num % 1 > 0.5 and math.ceil(num) or math.floor(num)
end

local function writeConsole(description)
    return bot:getLog():append(description)
end

local function backpack(id)
    return bot:getInventory():getItemCount(id)
end

local function isCanFindpath(x, y)
    return (#bot:getPath(x, y) > 0 or bot:isInTile(x, y))
end

local function createMessageID(url, content, fileNames)
    if url ~= '' then
        url = url .. '?wait=1'
        local http = HttpClient.new()
        http.url = url
        http.headers['Content-Type'] = 'application/json'
        http:setMethod(Method.post)
        http.content = [[
        {
            "username":"CRUS4DER",
            "embeds": [
                {
                    "title":"]] .. content .. [[",
                    "color": ]] .. math.random(111111, 999999) .. [[
                }
            ]
        }
    ]]
        local result = http:request()
        if result.error == 0 then
            local resultData = result.body:match('"id"%s*:%s*"([^"]+)"')
            if resultData and fileNames then
                writeFile(resultData, fileNames)
            end
            return resultData
        else
            print("Request Error: " .. result:getError())
        end
        return nil
    end
    return nil
end

local function createWebhook(botIndex, totalBots)
    if linkBotView ~= 'x' then
        local whCount = math.ceil(totalBots / maxBotPerWebhook)
        for i = 1, whCount do
            local startBot = (i - 1) * maxBotPerWebhook + 1
            local endBot = math.min(i * maxBotPerWebhook, totalBots)
            if botIndex == startBot then
                local messageIDs = createMessageID(linkBotView, 'Creating message for Bot List', files.VIEW)
            end
        end
        local readID = readFile(files.VIEW)
        for i , msg in pairs(readID) do
            table.insert(messageID, msg)
        end
        messageIdInfo = messageID[math.floor((bot.index - 1) / maxBotPerWebhook) + 1]
    end
end

local function itemFloat(id)
    return getWorld().growscan:getObjects()[id] or 0
end

local function notifications(description)
    messageBox = MessageBox.new()
    messageBox.title = 'CRUS4DER | Script Store'
    messageBox.description = description
    messageBox:send()
end

local function split(str, ptr)
    if not ptr then
        ptr = '%s'
    end
    local tbl = {}
    for string in string.gmatch(str, ptr) do
        table.insert(tbl, string)
    end
    return tbl
end

local function worldData(case)
    local str = ''
    local data = {}
    local dialog = ''
    if case == 'take' then
        data = storageTake
        dialog = 'No worlds available for taking items.'
    elseif case == 'drop' then
        data = storageDrop
        dialog = 'No worlds available for dropping items.'
    end
    if #data == 0 then
        return dialog
    else
        for i = 1, #data do
            if case == 'take' or case == 'drop' then
                local world = split(data[i], '[^:]+')[1]
                str = str .. '\n**[||' .. world .. '||]** '..(initialize[world] or 'N/A')
            end
        end
    end
    return str
end 

local function scanObjects()
    if linkStorageInfo ~= 'x' then
        local growscan = getBot():getWorld().growscan
        local str = ''
        for _, v in pairs(itemID) do
            for id, count in pairs(growscan:getObjects()) do
                if id == v.id then
                    str = str .. "\n" .. getInfo(id).name .. " : " .. count .. 'x'
                end
            end
        end
        return str
    end
end

local function formatStatus(plr)
    for i, v in pairs(BotStatus) do
        if v == plr.status then
            return tostring(i:gsub("_", " "):gsub("^%l", string.upper))
        end
    end
    return "Unknown"
end

local function emojiRecon(plr)
    if plr.status == BotStatus.online then
        return "<a:online:1235638419284037763>"
    end
    return "<a:offline:1238731608220237845>"
end

local function botStatic(message)
    if linkBotView ~= 'x' then
        local webhook = Webhook.new(linkBotView)
        webhook.avatar_url = avatarUrl
        webhook.username = "CRUS4DER"
        webhook.embed1.use = true
        webhook.embed1.color = math.random(111111, 999999)
        webhook.embed1.title = "Bots View"
        webhook.embed1.thumbnail = avatarUrl
        webhook.embed1.description = "**Updated: <t:" .. os.time() .. ":R>\nTotal Bot : "..bots.."\nScript : Auto Move\nSended By : "..bot.name.."**"
        local startBot = ((math.ceil(bot.index / maxBotPerWebhook) - 1) * maxBotPerWebhook) + 1
        local endBot = startBot + maxBotPerWebhook - 1
        for _, name in pairs(getBots()) do
            if name.index >= startBot and name.index <= endBot then
                webhook.embed1:addField('['..name.index..']'..name.name, 'Task : '..name.custom_status..'\nLevel : '..name.level..'\nWorld : ||'..name:getWorld().name..'||\nStatus : '..emojiRecon(name)..''..formatStatus(name)..'', true)
            end
        end
        webhook.embed1.footer.icon_url = avatarUrl
        webhook.embed1.footer.text = 'Script developed By CRUS4DER'
        webhook.embed1.timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
        webhook:edit(message)
    end
end

local function botInfo(messageIdInfo, enabledState)
    if linkStorageInfo ~= 'x' then
        for _, message in pairs(messageIdInfo) do
            local webhook = Webhook.new(linkStorageInfo)
            local world
            webhook.username = "CRUS4DER"
            webhook.embed1.use = true
            if enabledState then
                webhook.embed1.title = 'STORAGE TAKE | MOVE WTW'
                world = worldData('take')
            else
                webhook.embed1.title = 'STORAGE DROP | MOVE WTW'
                world = worldData('drop')
            end
            webhook.embed1.color = math.random(111111, 999999)
            webhook.embed1.thumbnail = avatarUrl
            webhook.embed1:addField('<:MONITOR:1033601526993793095>Last Visited', bot.name, false)
            webhook.embed1:addField('<:scrollbulletin:1228977435668910151>Storage', world, false)
            webhook.embed1.footer.icon_url = avatarUrl
            webhook.embed1.footer.text = 'Updated : '..(os.date('!%a, %b %d %Y at %I:%M %p', os.time() + 7 * 60 * 60))..'\nScript developed By CRUS4DER'
            webhook:edit(message)
        end
    end
end

local function botSend(text)
    if webhookStatusLink ~= 'x'  then
        local webhook = Webhook.new(webhookStatusLink)
        if tagDiscord then
            webhook.content = '@everyone'
        end
        webhook.username = "CRUS4DER"
        webhook.embed1.use = true
        webhook.embed1:addField('BOT INFORMATION', bot.name.. ' slot-' .. bot.index .. ' : **'..text..'**', false)
        webhook.embed1.footer.text = 'Updated : '..(os.date('!%a %b %d, %Y at %I:%M %p', os.time() + 7 * 60 * 60))..''
        webhook:send()
    end
end

local function reconnect()
    if bot.status ~= BotStatus.online then
        writeConsole(bot.name.. ' (slot-' .. bot.index .. ') status is ' .. formatStatus(bot))
        botSend('status is ' .. formatStatus(bot).. ''..emojiRecon(bot))
        botStatic(messageIdInfo)
        while bot.status ~= BotStatus.online do
            sleep(10000)
            if bot.status == BotStatus.account_banned or bot.status == BotStatus.account_suspended then
                bot.auto_reconnect = false
                writeConsole(bot.name.. ' (slot-' .. bot.index .. ') status is ' .. formatStatus(bot))
                botSend('status is ' .. formatStatus(bot).. ''..emojiRecon(bot))
                return error('Bot Suspended')
            elseif bot.status == BotStatus.maintenance then
                bot.auto_reconnect = false
                writeConsole(bot.name.. ' (slot-' .. bot.index .. ') status is ' .. formatStatus(bot))
                botSend('status is ' .. formatStatus(bot).. ''..emojiRecon(bot))
                sleep(60000 * delayMaintenance)
                bot.auto_reconnect = true
            end
        end
        writeConsole(bot.name.. ' (slot-' .. bot.index .. ') status is ' .. formatStatus(bot))
        botSend('status is ' .. formatStatus(bot).. ''..emojiRecon(bot))
        botStatic(messageIdInfo)
    end
end

local function warp(world, id)
    world = world:upper()
    id = id or ''
    nuked, wrong = false, false
    if not bot:isInWorld(world) then
        addEvent(Event.variantlist, function(variant, netid)
            if variant:get(0):getString() == 'OnConsoleMessage' then
                if variant:get(1):getString():lower():find('inaccessible.') then
                    nuked = true
                    unlistenEvents()
                end
            end
        end)
        local tries = 0
        while not bot:isInWorld(world) and not nuked do
            reconnect()
            bot:sendPacket(3, "action|join_request\nname|" .. (id == '' and world or world .. ('|' .. id)) .. "\ninvitedWorld|0")
            for i = 1, delayWarp do
                listenEvents(1)
                if bot:isInWorld(world) or nuked then
                    break
                end
            end
            sleep(5000)
            tries = tries + 1
            if tries % 8 == 0 then
                bot.auto_reconnect = false
                bot.custom_status = 'Hard Warp'
                local dialog = 'Hard warp? resting bot for '..delayHardWarp..' minutes'
                writeConsole(dialog)
                while bot.status == BotStatus.online do
                    bot:disconnect()
                    sleep(5000)
                end
                sleep(60000 * delayHardWarp)
                bot.auto_reconnect = true
            end
        end
        removeEvent(Event.variantlist)
    end
    if bot:isInWorld(world) and id ~= '' then
        local tries = 0
        while getTile(bot.x, bot.y).fg == 6 and not wrong do
            reconnect()
            bot:warp(id == '' and world or world .. ('|' .. id))
            for i = 1, delayWarp do
                sleep(1000)
                if getTile(bot.x, bot.y).fg ~= 6 then
                    break
                end
            end
            sleep(3000)
            tries = tries + 1
            if tries % 5 == 0 then
                wrong = true
            end
        end
    end
end

local function reposition(world, id, x, y)
    if bot.status ~= BotStatus.online then
        reconnect()
    end
    if bot.status == BotStatus.online then
        warp(world, id)
        if (x and y) and (bot:isInWorld(world) and isCanFindpath(x, y)) then
            while not bot:isInTile(x, y) do
                bot:findPath(x, y)
                reposition(world, id)
            end
        end
    end
end

local function tilecache(x, y, num)
    local count = 0
    local stack = 0
    for _, obj in pairs(getObjects()) do
        local object_x, object_y = math.floor((obj.x + 10) * (1 / 32)), math.floor((obj.y + 10) * (1 / 32))
        if object_x == x and object_y == y then
            stack = stack + 1
            count = count + obj.count
        end
    end
    return (not separated and (stack < 20 and count <= (4000 - num))) or (separated and (stack < 2 and count <= (200 - num)))
end

local function customTiles(ex, ye)
    local tiles = {}
    for y = ye, 0, -1 do
        for x = ex, 98 do
            table.insert(tiles, { x = x, y = y })
        end
    end
    return tiles
end

local function scanEmpty()
    for _, v in pairs(itemID) do
        if itemFloat(v.id) >= v.amount then
            return true
        end
    end
    return false
end

local function restoreItemID()
    for i, v in ipairs(saveItemID) do
        itemID[i].id = v.id
        itemID[i].limit = v.limit
        itemID[i].amount = v.amount
    end
end

local function checkItem()
    for _, v in pairs(itemID) do
        if backpack(v.id) < v.amount then
            return false
        end
    end
    return true
end


local function scanLimits()
    for _, v in pairs(itemID) do
        if itemFloat(v.id) >= v.limit then
            v.id = 0
        end
    end 
end

local function scanValue()
    for _, v in pairs(itemID) do
        if v.id ~= 0 then 
            return true   
        end
    end
    return false
end

local function shuffle(tbl)
    for i = #tbl, 2, -1 do
        local j = math.random(i)
        tbl[i], tbl[j] = tbl[j], tbl[i]
    end
    return tbl
end

local function restore()
    ::back::
    if #storageTake == 0 then
        selectWorld('collect')
    end
    bot.custom_status = 'Restore items'
    local index = math.random(#storageTake)
    local world, door = split(storageTake[index], '[^:]+')[1], split(storageTake[index], '[^:]+')[2]
    warp(world, door)
    if not nuked then
        if not wrong then
            restoreItemID()
            botStatic(messageIdInfo)
            local tiles = shuffle(customTiles(1, 50))
            local foundPath = true
            while foundPath do
                for i, v in ipairs(itemID) do
                    for _, tile in pairs(tiles) do
                        while not bot:isInTile(tile.x, tile.y) and isCanFindpath(tile.x, tile.y) do
                            bot:findPath(tile.x, tile.y)
                            reposition(world, door, tile.x, tile.y)
                        end
                        if getTile(tile.x + 1, tile.y).fg == 0 and tilecache(tile.x + 1, tile.y, backpack(v.id)) then
                            while backpack(v.id) > 0 and tilecache(tile.x + 1, tile.y, backpack(v.id)) do
                                bot:setDirection(false)
                                bot:drop(v.id, backpack(v.id))
                                sleep(delayDrop)
                                reposition(world, door, tile.x, tile.y)
                            end
                        end
                        tiles = shuffle(customTiles(1, 50))
                        if backpack(v.id) == 0 then
                            foundPath = false
                            break
                        end
                    end
                end
            end
        else
            table.remove(storageTake, index)
            goto back
        end
    else
        table.remove(storageTake, index)
        goto back
    end
end

local function takeItem()
    ::back::
    if #storageTake == 0 then
        if looping then
            storageTake = {table.unpack(originalWorld)}
            goto back
        else
            restore()
            bot.custom_status = 'All world has empty'
            botStatic(messageIdInfo)
            bot:leaveWorld()
            botInfo(collectMessageID, true)
            local dialog = 'No world available for collecting items'
            writeConsole(dialog)
            botSend(dialog)
            if removingBots then
                removeBot()
            end
            if sendNotif then
                notifications(dialog)
            end
            return error(dialog)
        end
    end
    bot.custom_status = 'Take items'
    local index = math.random(#storageTake)
    local world, door = split(storageTake[index], '[^:]+')[1], split(storageTake[index], '[^:]+')[2]
    warp(world, door)
    if not nuked then
        if not wrong then
            botStatic(messageIdInfo)
            table.insert(originalWorld, storageTake[index])
            if scanEmpty() then
                for _, v in ipairs(itemID) do
                    while backpack(v.id) < v.amount do
                        local pathFound = false
                        for _, obj in pairs(getObjects()) do
                            local targetX, targetY = round(obj.x / 32), math.floor(obj.y / 32)
                            local canFindpath = isCanFindpath(targetX, targetY)
                            if obj.id == v.id and canFindpath then
                                bot:findPath(targetX, targetY)
                                sleep(500)
                                bot:collectObject(obj.oid, 3)
                                sleep(500)
                                reposition(world, door, targetX, targetY)
                                pathFound = true
                                break
                            end
                        end
                        if not pathFound then
                            break
                        end
                    end
                end
            else
                if not looping then
                    writeConsole('['..world..'] may has empty, removing worlds')
                    botSend('['..world..'] may has empty, removing worlds')
                else
                    while bot:isInWorld() do
                        bot:leaveWorld()
                        sleep(5000)
                    end
                    sleep(1000 * delayLooping)
                end
                table.remove(storageTake, index)
                goto back
            end
            initialize[world] = scanObjects()
            botInfo(collectMessageID, true)
        else
            writeFile(world..' ---STORAGE COLLECT', files.WRONG)
            writeConsole('['..world..'] Storage collect has wrong ID, removing worlds')
            table.remove(storageTake, index)
            goto back
        end
    else
        writeFile(world..' ---STORAGE COLLECT', files.NUKED)
        writeConsole('['..world..'] Storage collect has NUKED, removing worlds')
        table.remove(storageTake, index)
        goto back
    end
end

local function dropItem()
    ::back::
    if #storageDrop == 0 then
        restore()
        bot.custom_status = 'All world has limit'
        botStatic(messageIdInfo)
        bot:leaveWorld()
        botInfo(storeMessageID, false)
        local dialog = 'No storage available for storing items.'
        writeConsole(dialog)
        botSend(dialog)
        if removingBots then
            removeBot()
        end
        if sendNotif then
            notifications(dialog)
        end
        return error(dialog)
    end
    bot.custom_status = 'Drop items'
    local index = math.random(#storageDrop)
    local world, door = split(storageDrop[index], '[^:]+')[1], split(storageDrop[index], '[^:]+')[2]
    warp(world, door)
    if not nuked then
        if not wrong then
            restoreItemID()
            botStatic(messageIdInfo)
            scanLimits()
            if scanValue() then
                ::retry::
                local tiles = customTiles(dropX, dropY)
                local function isItemFinished(v)
                    return backpack(v.id) == 0
                end
                for idx, v in ipairs(itemID) do
                    if isItemFinished(v) then
                        goto continueItem
                    end
                    for _, tile in pairs(tiles) do
                        local targetX, targetY = tile.x, tile.y - (idx - 1)
                        if targetX >= dropX and targetY <= dropY and isCanFindpath(targetX, targetY) and tilecache(targetX + 1, targetY, backpack(v.id)) then
                            while not bot:isInTile(targetX, targetY) and backpack(v.id) > 0 do
                                bot:findPath(targetX, targetY)
                                reposition(world, door, targetX, targetY)
                            end
                            if targetX >= 98 then
                                dropY = dropY - #itemID
                                targetX, targetY = dropX, dropY
                                goto retry
                            end
                            if separated then sleep(delayDrop) end
                            while backpack(v.id) > 0 and tilecache(targetX + 1, targetY, backpack(v.id)) and itemFloat(v.id) < v.limit do
                                bot:setDirection(false)
                                bot:drop(v.id, backpack(v.id))
                                sleep(delayDrop)
                                reposition(world, door, targetX, targetY)
                            end
                        end
                        if isItemFinished(v) then
                            break
                        end
                    end
                    ::continueItem::
                end
            else
                writeConsole(string.upper(world)..' has reached limit, removing worlds')
                botSend(string.upper(world)..' has reached limit, removing worlds')
                table.remove(storageDrop, index)
                goto back
            end
            initialize[world] = scanObjects()
            botInfo(storeMessageID, false)
        else
            writeFile(world..' ---STORAGE STORE', files.WRONG)
            writeConsole('['..world..'] Storage store has wrong ID, removing worlds')
            table.remove(storageDrop, index)
            goto back
        end
    else
        writeFile(world..' ---STORAGE STORE', files.NUKED)
        writeConsole('['..world..'] Storage store has NUKED, removing worlds')
        table.remove(storageDrop, index)
        goto back
    end
end

local function creatingForMessage()
    if linkStorageInfo ~= 'x' then
        if bot.index == 1 then
            createMessageID(linkStorageInfo, 'Creating messageID for Storage Take', files.COLLECT)
            createMessageID(linkStorageInfo, 'Creating messageID for Storage Drop', files.STORE)
        end
        local collect, store = readFile(files.COLLECT), readFile(files.STORE)
        for _, id in ipairs(collect) do
            table.insert(collectMessageID, id)
        end
        for _, id in ipairs(store) do
            table.insert(storeMessageID, id)
        end
    end
end

if scriptInformation == "Script Move developed by CRUS4DER | Script Store, Link Discord : https://discord.gg/etM6H4D84Z" and scriptVersion == "0.2" then
    spreadValue(itemList, itemID)
    spreadValue(itemList, saveItemID)

    if fileExists(files.COLLECT) then deleteFile(files.COLLECT) end
    if fileExists(files.STORE) then deleteFile(files.STORE) end
    if fileExists(files.VIEW) then deleteFile(files.VIEW) end
    if fileExists(files.NUKED) then deleteFile(files.NUKED) end
    if fileExists(files.WRONG) then deleteFile(files.WRONG) end
    if separated then delayDrop = math.random((delayDrop - 1000), delayDrop) end

    sleep((bot.index - 1) * (delayExecute * 1000))
    creatingForMessage()
    createWebhook(bot.index, bots)
    botStatic(messageIdInfo)
    selectWorld('collect')
    selectWorld('storing')
    reconnect()
    while true do
        if not checkItem() then
            takeItem()
        end
        dropItem()
    end
else
    sendNotif = true                                    
    notifications('Buying from reseller? u are idiot people')
end
